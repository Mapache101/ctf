<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spinning 3D Text</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000000;
            color: white;
            font-family: 'Inter', sans-serif;
        }
        canvas {
            display: block;
        }
        #info {
            position: absolute;
            top: 10px;
            width: 100%;
            text-align: center;
            z-index: 100;
            display: block;
            font-size: 0.8em;
            color: #555;
        }
    </style>
</head>
<body>
    <div id="info">Drag the mouse to look around</div>

    <script type="importmap">
        {
            "imports": {
                "three": "https://cdn.jsdelivr.net/npm/three@0.164.1/build/three.module.js",
                "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.164.1/examples/jsm/"
            }
        }
    </script>

    <script type="module">
        import * as THREE from 'three';
        import { FontLoader } from 'three/addons/loaders/FontLoader.js';
        import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

        let scene, camera, renderer, textMesh, controls;

        // Initialization
        function init() {
            // Scene setup
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x000000);

            // Camera setup
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 15;

            // Renderer setup
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);
            
            // OrbitControls setup for mouse interaction
            controls = new OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.screenSpacePanning = false;
            controls.minDistance = 5;
            controls.maxDistance = 50;


            // Load font and create text geometry
            const fontLoader = new FontLoader();
            fontLoader.load('https://cdn.jsdelivr.net/npm/three@0.164.1/examples/fonts/helvetiker_bold.typeface.json', function (font) {
                const text = "Winner Winner\nChicken Dinner";
                const textGeometry = new TextGeometry(text, {
                    font: font,
                    size: 2,
                    height: 0.5,
                    curveSegments: 12,
                    bevelEnabled: true,
                    bevelThickness: 0.03,
                    bevelSize: 0.05,
                    bevelOffset: 0,
                    bevelSegments: 5,
                });
                
                // Center the geometry
                textGeometry.computeBoundingBox();
                const textWidth = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;
                const textHeight = textGeometry.boundingBox.max.y - textGeometry.boundingBox.min.y;
                textGeometry.translate(-textWidth / 2, -textHeight / 2, 0);


                const textMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0xffffff });
                textMesh = new THREE.Mesh(textGeometry, textMaterial);
                scene.add(textMesh);
            });

            // Lighting
            const ambientLight = new THREE.AmbientLight(0x404040, 2); // soft white light
            scene.add(ambientLight);

            const pointLight = new THREE.PointLight(0xffffff, 1, 100);
            pointLight.position.set(10, 10, 10);
            scene.add(pointLight);
            
            const pointLight2 = new THREE.PointLight(0xffffff, 1, 100);
            pointLight2.position.set(-10, -10, -10);
            scene.add(pointLight2);


            // Event listener for window resize
            window.addEventListener('resize', onWindowResize, false);

            // Start animation
            animate();
        }

        // Handle window resize
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);

            // Update controls
            controls.update();

            if (textMesh) {
                // Rotate the text
                textMesh.rotation.y += 0.005;
                textMesh.rotation.x += 0.002;

                // Change the color over time
                const time = Date.now() * 0.001;
                const hue = (time * 0.1) % 1;
                textMesh.material.color.setHSL(hue, 1, 0.6);
            }

            renderer.render(scene, camera);
        }

        // Run the application
        init();

    </script>
</body>
</html>
